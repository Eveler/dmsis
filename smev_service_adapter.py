# -*- coding: utf-8 -*-
# flake8:noqa
# isort:skip_file
# vim:et:ft=python:nowrap:sts=4:sw=4:ts=4
##############################################################################
# Note: Generated by soapfish.xsd2py at 2017-11-05 01:26:59.332046
#       Try to avoid editing it if you might need to regenerate it.
##############################################################################

from soapfish import xsd


# smev-service-adapter-faults.xsd - urn://x-artefacts-smev-gov-ru/services/service-adapter/types/faults


class String_50(xsd.String):
    pass


class Fault(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    code = xsd.Element(String_50, minOccurs=0)
    description = xsd.Element(xsd.String, minOccurs=0)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


Schema_09e57 = xsd.Schema(
    imports=[],
    includes=[],
    targetNamespace='urn://x-artefacts-smev-gov-ru/services/service-adapter/types/faults',
    location='${scheme}://${host}/smev-service-adapter-faults.xsd',
    elementFormDefault='qualified',
    simpleTypes=[String_50],
    attributeGroups=[],
    groups=[],
    complexTypes=[Fault],
    elements={'SystemFault': xsd.Element(Fault), 'ValidationFault': xsd.Element(Fault), 'SyncFault': xsd.Element(Fault)},
)

# XXX: Workaround for naming issues related to relative locations!
Schema_33af9 = Schema_09e57


# urn://x-artefacts-smev-gov-ru/services/service-adapter/types


class RejectCode(String_50):
    enumeration = ['ACCESS_DENIED', 'NO_DATA', 'UNKNOWN_REQUEST_DESCRIPTION']


class TypeCriteria(String_50):
    enumeration = ['RESPONSE', 'REQUEST']


class ClientIdCriteria(String_50):
    enumeration = ['GET_REQUEST_BY_REQUEST_CLIENTID', 'GET_RESPONSE_BY_REQUEST_CLIENTID', 'GET_RESPONSE_BY_RESPONSE_CLIENTID']


class StatusMessageCategory(String_50):
    enumeration = ['OTHER', 'ERROR']


class ErrorType(String_50):
    enumeration = ['SERVER', 'CLIENT']


class UUID(xsd.String):
    pattern = r'[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}'


class String_20(xsd.String):
    pass


class String_50(xsd.String):
    pass


class String_1000(xsd.String):
    pass


class String_1500(xsd.String):
    pass


class String_4000(xsd.String):
    pass


class QueryTypeCriteria(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    messageTypeCriteria = xsd.Element(TypeCriteria, minOccurs=1)

    @classmethod
    def create(cls, messageTypeCriteria):
        instance = cls()
        instance.messageTypeCriteria = messageTypeCriteria
        return instance


class FindTypeCriteria(xsd.ComplexType):
    pass
    INDICATOR = xsd.Choice
    messageIntervalCriteria = xsd.Element(__name__ + '.MessageIntervalCriteria', minOccurs=1)
    messageClientIdCriteria = xsd.Element(__name__ + '.MessageClientIdCriteria', minOccurs=1)


class MessageIntervalCriteria(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    _from = xsd.Element(xsd.DateTime, tagname='from', minOccurs=1)
    to = xsd.Element(xsd.DateTime, minOccurs=0)

    @classmethod
    def create(cls, _from):
        instance = cls()
        instance._from = _from
        return instance


class MessageClientIdCriteria(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    clientId = xsd.Element(String_50, minOccurs=1)
    clientIdCriteria = xsd.Element(ClientIdCriteria, minOccurs=1)

    @classmethod
    def create(cls, clientId, clientIdCriteria):
        instance = cls()
        instance.clientId = clientId
        instance.clientIdCriteria = clientIdCriteria
        return instance


class Metadata(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    clientId = xsd.Element(String_50, minOccurs=1)

    @classmethod
    def create(cls, clientId):
        instance = cls()
        instance.clientId = clientId
        return instance


class LinkedGroupIdentity(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    refClientId = xsd.Element(String_50, minOccurs=0)
    refGroupId = xsd.Element(String_50, minOccurs=0)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class CreateGroupIdentity(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    FRGUServiceCode = xsd.Element(String_20, minOccurs=1)
    FRGUServiceDescription = xsd.Element(String_1000, minOccurs=0)
    FRGUServiceRecipientDescription = xsd.Element(String_1000, minOccurs=0)

    @classmethod
    def create(cls, FRGUServiceCode):
        instance = cls()
        instance.FRGUServiceCode = FRGUServiceCode
        return instance


class RequestContentType(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    content = xsd.Element(__name__ + '.Content')

    @classmethod
    def create(cls, content):
        instance = cls()
        instance.content = content
        return instance


class ResponseContentType(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class Content(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    MessagePrimaryContent = xsd.Ref(__name__ + '.MessagePrimaryContent')
    PersonalSignature = xsd.Ref(__name__ + '.PersonalSignature')
    AttachmentHeaderList = xsd.Ref(__name__ + '.AttachmentHeaderList')

    @classmethod
    def create(cls, MessagePrimaryContent):
        instance = cls()
        instance.MessagePrimaryContent = MessagePrimaryContent
        return instance


class Reject(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    code = xsd.Element(RejectCode)
    description = xsd.Element(String_4000)

    @classmethod
    def create(cls, code, description):
        instance = cls()
        instance.code = code
        instance.description = description
        return instance


class Status(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    code = xsd.Element(String_50)
    description = xsd.Element(String_4000)

    @classmethod
    def create(cls, code, description):
        instance = cls()
        instance.code = code
        instance.description = description
        return instance


class Message(xsd.ComplexType):
    pass


class SyncRequest(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    itSystem = xsd.Ref(__name__ + '.ItSystem')
    RequestMessage = xsd.Ref(__name__ + '.RequestMessage')

    @classmethod
    def create(cls, itSystem, RequestMessage):
        instance = cls()
        instance.itSystem = itSystem
        instance.RequestMessage = RequestMessage
        return instance


class SyncResponse(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    smevMetadata = xsd.Ref(__name__ + '.SmevMetadata')
    Message = xsd.Ref(Message)

    @classmethod
    def create(cls, smevMetadata, Message):
        instance = cls()
        instance.smevMetadata = smevMetadata
        instance.Message = Message
        return instance


class ClientMessage(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    itSystem = xsd.Ref(__name__ + '.ItSystem')

    @classmethod
    def create(cls, itSystem):
        instance = cls()
        instance.itSystem = itSystem
        return instance


class AdapterMessage(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    smevMetadata = xsd.Ref(__name__ + '.SmevMetadata')
    Message = xsd.Ref(Message)

    @classmethod
    def create(cls, smevMetadata, Message):
        instance = cls()
        instance.smevMetadata = smevMetadata
        instance.Message = Message
        return instance


class SmevMetadata(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    MessageId = xsd.Element(UUID, minOccurs=0)
    ReferenceMessageID = xsd.Element(UUID, minOccurs=0)
    TransactionCode = xsd.Element(String_1500, minOccurs=0)
    OriginalMessageID = xsd.Element(UUID, minOccurs=0)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class MessageQuery(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    itSystem = xsd.Ref(__name__ + '.ItSystem')
    nodeId = xsd.Element(String_50, minOccurs=0)
    specificQuery = xsd.Element(QueryTypeCriteria, minOccurs=0)

    @classmethod
    def create(cls, itSystem):
        instance = cls()
        instance.itSystem = itSystem
        return instance


class FindMessageQuery(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    itSystem = xsd.Ref(__name__ + '.ItSystem')
    specificQuery = xsd.Element(FindTypeCriteria, minOccurs=1)

    @classmethod
    def create(cls, itSystem, specificQuery):
        instance = cls()
        instance.itSystem = itSystem
        instance.specificQuery = specificQuery
        return instance


class BusinessProcessMetadata(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class AttachmentHeaderType(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    filePath = xsd.Element(xsd.String)
    SignaturePKCS7 = xsd.Element(xsd.Base64Binary, minOccurs=0)

    @classmethod
    def create(cls, filePath):
        instance = cls()
        instance.filePath = filePath
        return instance


class XMLDSigSignatureType(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class RequestMetadataType(Metadata):
    INHERITANCE = xsd.Inheritance.EXTENSION
    INDICATOR = xsd.Sequence
    nodeId = xsd.Element(String_50, minOccurs=0)
    eol = xsd.Element(xsd.DateTime, minOccurs=0)
    testMessage = xsd.Element(xsd.Boolean, minOccurs=0)
    BusinessProcessMetadata = xsd.Ref(BusinessProcessMetadata)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class ResponseMetadataType(Metadata):
    INHERITANCE = xsd.Inheritance.EXTENSION
    INDICATOR = xsd.Sequence
    replyToClientId = xsd.Element(String_50, minOccurs=1)

    @classmethod
    def create(cls, replyToClientId):
        instance = cls()
        instance.replyToClientId = replyToClientId
        return instance


class RequestMessageType(Message):
    INHERITANCE = xsd.Inheritance.EXTENSION
    INDICATOR = xsd.Sequence
    RequestMetadata = xsd.Ref(__name__ + '.RequestMetadata')
    RequestContent = xsd.Ref(__name__ + '.RequestContent')

    @classmethod
    def create(cls, RequestMetadata, RequestContent):
        instance = cls()
        instance.RequestMetadata = RequestMetadata
        instance.RequestContent = RequestContent
        return instance


class ResponseMessageType(Message):
    INHERITANCE = xsd.Inheritance.EXTENSION
    INDICATOR = xsd.Sequence
    ResponseMetadata = xsd.Ref(__name__ + '.ResponseMetadata')
    ResponseContent = xsd.Ref(__name__ + '.ResponseContent')

    @classmethod
    def create(cls, ResponseMetadata, ResponseContent):
        instance = cls()
        instance.ResponseMetadata = ResponseMetadata
        instance.ResponseContent = ResponseContent
        return instance


class StatusMessage(Message):
    INHERITANCE = xsd.Inheritance.EXTENSION
    INDICATOR = xsd.Sequence
    statusMetadata = xsd.Element(__name__ + '.StatusMetadataType', minOccurs=1)
    status = xsd.Element(StatusMessageCategory, minOccurs=1)
    details = xsd.Element(xsd.String, minOccurs=0)
    timestamp = xsd.Element(xsd.DateTime, minOccurs=0)

    @classmethod
    def create(cls, statusMetadata, status):
        instance = cls()
        instance.statusMetadata = statusMetadata
        instance.status = status
        return instance


class StatusMetadataType(Metadata):
    INHERITANCE = xsd.Inheritance.EXTENSION
    INDICATOR = xsd.Sequence
    originalClientId = xsd.Element(String_50, minOccurs=1)

    @classmethod
    def create(cls, originalClientId):
        instance = cls()
        instance.originalClientId = originalClientId
        return instance


class ErrorMessage(StatusMessage):
    INHERITANCE = xsd.Inheritance.EXTENSION
    INDICATOR = xsd.Sequence
    type = xsd.Element(ErrorType, minOccurs=1)
    fault = xsd.Element(Fault, minOccurs=1)

    @classmethod
    def create(cls, type, fault):
        instance = cls()
        instance.type = type
        instance.fault = fault
        return instance


class QueryResultList(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    QueryResult = xsd.Ref(__name__ + '.QueryResult')

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class MessageResult(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    itSystem = xsd.Ref(__name__ + '.ItSystem')
    MessageId = xsd.Element(UUID, minOccurs=1)

    @classmethod
    def create(cls, itSystem, MessageId):
        instance = cls()
        instance.itSystem = itSystem
        instance.MessageId = MessageId
        return instance


class MessagePrimaryContent(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class AttachmentHeaderList(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    AttachmentHeader = xsd.ListElement(AttachmentHeaderType, tagname='AttachmentHeader', maxOccurs=xsd.UNBOUNDED)

    @classmethod
    def create(cls, AttachmentHeader):
        instance = cls()
        instance.AttachmentHeader = AttachmentHeader
        return instance


Schema_4c9ba = xsd.Schema(
    imports=[Schema_09e57],
    includes=[],
    targetNamespace='urn://x-artefacts-smev-gov-ru/services/service-adapter/types',
    elementFormDefault='qualified',
    simpleTypes=[RejectCode, TypeCriteria, ClientIdCriteria, StatusMessageCategory, ErrorType, UUID, String_20, String_50, String_1000, String_1500, String_4000],
    attributeGroups=[],
    groups=[],
    complexTypes=[QueryTypeCriteria, FindTypeCriteria, MessageIntervalCriteria, MessageClientIdCriteria, Metadata, LinkedGroupIdentity, CreateGroupIdentity, RequestContentType, ResponseContentType, Content, Reject, Status, Message, SyncRequest, SyncResponse, ClientMessage, AdapterMessage, SmevMetadata, MessageQuery, FindMessageQuery, BusinessProcessMetadata, AttachmentHeaderType, XMLDSigSignatureType, RequestMetadataType, ResponseMetadataType, RequestMessageType, ResponseMessageType, StatusMessage, StatusMetadataType, ErrorMessage],
    elements={'itSystem': xsd.Element(__name__ + '.String-50'), 'RequestMetadata': xsd.Element(RequestMetadataType), 'ResponseMetadata': xsd.Element(ResponseMetadataType), 'RequestContent': xsd.Element(RequestContentType), 'ResponseContent': xsd.Element(ResponseContentType), 'Message': xsd.Element(Message), 'RequestMessage': xsd.Element(RequestMessageType), 'ResponseMessage': xsd.Element(ResponseMessageType), 'SyncRequest': xsd.Element(SyncRequest), 'SyncResponse': xsd.Element(SyncResponse), 'ClientMessage': xsd.Element(ClientMessage), 'QueryResult': xsd.Element(AdapterMessage), 'QueryResultList': xsd.Element(QueryResultList()), 'StatusMessage': xsd.Element(StatusMessage), 'ErrorMessage': xsd.Element(ErrorMessage), 'smevMetadata': xsd.Element(SmevMetadata), 'BusinessProcessMetadata': xsd.Element(BusinessProcessMetadata), 'MessageQuery': xsd.Element(MessageQuery), 'FindMessageQuery': xsd.Element(FindMessageQuery), 'MessageResult': xsd.Element(MessageResult()), 'MessagePrimaryContent': xsd.Element(MessagePrimaryContent()), 'AttachmentHeaderList': xsd.Element(AttachmentHeaderList()), 'PersonalSignature': xsd.Element(XMLDSigSignatureType)},
)

