# -*- coding: utf-8 -*-
# flake8:noqa
# isort:skip_file
# vim:et:ft=python:nowrap:sts=4:sw=4:ts=4
##############################################################################
# Note: Generated by soapfish.wsdl2py at 2017-11-13 17:21:02.972172
#       Try to avoid editing it if you might need to regenerate it.
##############################################################################

from soapfish import soap, xsd

BaseHeader = xsd.ComplexType

##############################################################################
# Schemas


# urn://x-artefacts-smev-gov-ru/services/message-exchange/types/faults/1.2


# class SignatureVerificationFault(__name__ + '.SmevFault'):
class SignatureVerificationFault(xsd.ComplexType):
    INHERITANCE = xsd.Inheritance.EXTENSION
    INDICATOR = xsd.Sequence
    SignatureVerificationFault = xsd.Element(xsd.String)

    @classmethod
    def create(cls, SignatureVerificationFault):
        instance = cls()
        instance.SignatureVerificationFault = SignatureVerificationFault
        return instance


# class InvalidContent(__name__ + '.SmevFault'):
class InvalidContent(xsd.ComplexType):
    INHERITANCE = xsd.Inheritance.EXTENSION
    INDICATOR = xsd.Sequence

    @classmethod
    def create(cls, ValidationError):
        instance = cls()
        instance.ValidationError = ValidationError
        return instance


# class AttachmentSizeLimitExceeded(__name__ + '.SmevFault'):
class AttachmentSizeLimitExceeded(xsd.ComplexType):
    INHERITANCE = xsd.Inheritance.EXTENSION
    INDICATOR = xsd.Sequence
    PermittedTotalAttachmentSize = xsd.Element(xsd.Long)
    RealTotalAttachmentSize = xsd.Element(xsd.Long)

    @classmethod
    def create(cls, PermittedTotalAttachmentSize, RealTotalAttachmentSize):
        instance = cls()
        instance.PermittedTotalAttachmentSize = PermittedTotalAttachmentSize
        instance.RealTotalAttachmentSize = RealTotalAttachmentSize
        return instance


# class BusinessDataTypeIsNotSupported(__name__ + '.SmevFault'):
class BusinessDataTypeIsNotSupported(xsd.ComplexType):
    INHERITANCE = xsd.Inheritance.EXTENSION
    INDICATOR = xsd.Sequence
    RootElementLocalName = xsd.Element(xsd.String)
    RootElementNamespaceURI = xsd.Element(xsd.String)

    @classmethod
    def create(cls, RootElementLocalName, RootElementNamespaceURI):
        instance = cls()
        instance.RootElementLocalName = RootElementLocalName
        instance.RootElementNamespaceURI = RootElementNamespaceURI
        return instance


# class DestinationOverflow(__name__ + '.SmevFault'):
class DestinationOverflow(xsd.ComplexType):
    INHERITANCE = xsd.Inheritance.EXTENSION
    INDICATOR = xsd.Sequence
    MessageBrokerAddress = xsd.Element(xsd.String)
    DestinationName = xsd.Element(xsd.String)

    @classmethod
    def create(cls, MessageBrokerAddress, DestinationName):
        instance = cls()
        instance.MessageBrokerAddress = MessageBrokerAddress
        instance.DestinationName = DestinationName
        return instance


# class QuoteLimitExceeded(__name__ + '.SmevFault'):
class QuoteLimitExceeded(xsd.ComplexType):
    INHERITANCE = xsd.Inheritance.EXTENSION
    INDICATOR = xsd.Sequence
    RemainedTotalQuoteSize = xsd.Element(xsd.Long)
    RealTotalAttachmentSize = xsd.Element(xsd.Long)

    @classmethod
    def create(cls, RemainedTotalQuoteSize, RealTotalAttachmentSize):
        instance = cls()
        instance.RemainedTotalQuoteSize = RemainedTotalQuoteSize
        instance.RealTotalAttachmentSize = RealTotalAttachmentSize
        return instance



# urn://x-artefacts-smev-gov-ru/services/message-exchange/types/basic/1.2


class InteractionStatusType(xsd.String):
    enumeration = ['doesNotExist', 'requestIsQueued', 'requestIsAcceptedBySmev', 'requestIsRejectedBySmev', 'underProcessing', 'responseIsAcceptedBySmev', 'responseIsRejectedBySmev', 'cancelled', 'messageIsArchived', 'messageIsDelivered']


class XMLDSigSignatureType(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class AttachmentContentType(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    # Id = xsd.Element(xsd.ID)
    Id = xsd.Element(xsd.String)
    Content = xsd.Element(xsd.Base64Binary)

    @classmethod
    def create(cls, Id, Content):
        instance = cls()
        instance.Id = Id
        instance.Content = Content
        return instance


class Void(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class AttachmentHeaderType(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    contentId = xsd.Element(xsd.String)
    MimeType = xsd.Element(xsd.String)
    SignaturePKCS7 = xsd.Element(xsd.Base64Binary, minOccurs=0)

    @classmethod
    def create(cls, contentId, MimeType):
        instance = cls()
        instance.contentId = contentId
        instance.MimeType = MimeType
        return instance


class RefAttachmentHeaderType(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    uuid = xsd.Element(xsd.String)
    Hash = xsd.Element(xsd.String)
    MimeType = xsd.Element(xsd.String)
    SignaturePKCS7 = xsd.Element(xsd.Base64Binary, minOccurs=0)

    @classmethod
    def create(cls, uuid, Hash, MimeType):
        instance = cls()
        instance.uuid = uuid
        instance.Hash = Hash
        instance.MimeType = MimeType
        return instance


class FSAuthInfo(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    uuid = xsd.Element(xsd.String)
    UserName = xsd.Element(xsd.String)
    Password = xsd.Element(xsd.String)
    FileName = xsd.Element(xsd.String)

    @classmethod
    def create(cls, uuid, UserName, Password, FileName):
        instance = cls()
        instance.uuid = uuid
        instance.UserName = UserName
        instance.Password = Password
        instance.FileName = FileName
        return instance


class SmevFault(Void):
    INHERITANCE = xsd.Inheritance.EXTENSION
    INDICATOR = xsd.Sequence
    Code = xsd.Element(xsd.String, minOccurs=0)
    Description = xsd.Element(xsd.String, minOccurs=0)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class AckTargetMessage(xsd.ComplexType):
    pass


class AttachmentContentList(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    AttachmentContent = xsd.ListElement(AttachmentContentType, tagname='AttachmentContent', maxOccurs=xsd.UNBOUNDED)

    @classmethod
    def create(cls, AttachmentContent):
        instance = cls()
        instance.AttachmentContent = AttachmentContent
        return instance


class AttachmentHeaderList(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    AttachmentHeader = xsd.ListElement(AttachmentHeaderType, tagname='AttachmentHeader', maxOccurs=xsd.UNBOUNDED)

    @classmethod
    def create(cls, AttachmentHeader):
        instance = cls()
        instance.AttachmentHeader = AttachmentHeader
        return instance


class FSAttachmentsList(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    FSAttachment = xsd.ListElement(FSAuthInfo, tagname='FSAttachment', maxOccurs=xsd.UNBOUNDED)

    @classmethod
    def create(cls, FSAttachment):
        instance = cls()
        instance.FSAttachment = FSAttachment
        return instance


class MessagePrimaryContent(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class MessageReference(xsd.ComplexType):
    pass


class MessageTypeSelector(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    # Id = xsd.Attribute(xsd.ID, use=xsd.Use.OPTIONAL)
    Id = xsd.Attribute(xsd.String, use=xsd.Use.OPTIONAL)
    NamespaceURI = xsd.Element(xsd.AnyURI, minOccurs=0)
    # RootElementLocalName = xsd.Element(xsd.NCName, minOccurs=0)
    RootElementLocalName = xsd.Element(xsd.String, minOccurs=0)
    Timestamp = xsd.Element(xsd.DateTime)
    NodeID = xsd.Element(xsd.String, minOccurs=0)

    @classmethod
    def create(cls, Timestamp):
        instance = cls()
        instance.Timestamp = Timestamp
        return instance


class RefAttachmentHeaderList(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    RefAttachmentHeader = xsd.ListElement(RefAttachmentHeaderType, tagname='RefAttachmentHeader', maxOccurs=xsd.UNBOUNDED)

    @classmethod
    def create(cls, RefAttachmentHeader):
        instance = cls()
        instance.RefAttachmentHeader = RefAttachmentHeader
        return instance


class Timestamp(xsd.ComplexType):
    pass



# urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.2


class RejectCode(xsd.String):
    enumeration = ['ACCESS_DENIED', 'NO_DATA', 'UNKNOWN_REQUEST_DESCRIPTION', 'FAILURE']


class MessageTypeType(xsd.String):
    enumeration = ['REQUEST', 'BROADCAST', 'RESPONSE']


class AckRequest(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    AckTargetMessage = xsd.Ref(__name__ + '.AckTargetMessage')
    CallerInformationSystemSignature = xsd.Element(__name__ + '.XMLDSigSignatureType', minOccurs=0)

    @classmethod
    def create(cls, AckTargetMessage):
        instance = cls()
        instance.AckTargetMessage = AckTargetMessage
        return instance


class AsyncProcessingStatus(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    OriginalMessageId = xsd.Element(xsd.String)
    StatusCategory = xsd.Element(__name__ + '.InteractionStatusType')
    StatusDetails = xsd.Element(xsd.String, minOccurs=0)
    SmevFault = xsd.Element(__name__ + '.SmevFault', minOccurs=0)

    @classmethod
    def create(cls, OriginalMessageId, StatusCategory):
        instance = cls()
        instance.OriginalMessageId = OriginalMessageId
        instance.StatusCategory = StatusCategory
        return instance


class AsyncProcessingStatusData(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    # Id = xsd.Attribute(xsd.ID, use=xsd.Use.OPTIONAL)
    Id = xsd.Attribute(xsd.String, use=xsd.Use.OPTIONAL)
    AsyncProcessingStatus = xsd.Ref(__name__ + '.AsyncProcessingStatus')

    @classmethod
    def create(cls, AsyncProcessingStatus):
        instance = cls()
        instance.AsyncProcessingStatus = AsyncProcessingStatus
        return instance


class GetRequestRequest(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    MessageTypeSelector = xsd.Ref(__name__ + '.MessageTypeSelector')
    CallerInformationSystemSignature = xsd.Element(__name__ + '.XMLDSigSignatureType', minOccurs=0)

    @classmethod
    def create(cls, MessageTypeSelector):
        instance = cls()
        instance.MessageTypeSelector = MessageTypeSelector
        return instance


class GetRequestResponse(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class GetResponseRequest(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    MessageTypeSelector = xsd.Ref(__name__ + '.MessageTypeSelector')
    CallerInformationSystemSignature = xsd.Element(__name__ + '.XMLDSigSignatureType', minOccurs=0)

    @classmethod
    def create(cls, MessageTypeSelector):
        instance = cls()
        instance.MessageTypeSelector = MessageTypeSelector
        return instance


class GetResponseResponse(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class GetStatusRequest(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    Timestamp = xsd.Ref(__name__ + '.Timestamp')
    CallerInformationSystemSignature = xsd.Element(__name__ + '.XMLDSigSignatureType')

    @classmethod
    def create(cls, Timestamp, CallerInformationSystemSignature):
        instance = cls()
        instance.Timestamp = Timestamp
        instance.CallerInformationSystemSignature = CallerInformationSystemSignature
        return instance


class GetStatusResponse(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    SmevAsyncProcessingMessage = xsd.Ref(__name__ + '.SmevAsyncProcessingMessage')

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class MessageMetadata(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    # Id = xsd.Attribute(xsd.ID, use=xsd.Use.OPTIONAL)
    Id = xsd.Attribute(xsd.String, use=xsd.Use.OPTIONAL)
    MessageId = xsd.Element(xsd.String, minOccurs=0)
    MessageType = xsd.Element(MessageTypeType)
    SendingTimestamp = xsd.Element(xsd.DateTime)
    DeliveryTimestamp = xsd.Element(xsd.DateTime, minOccurs=0)
    Status = xsd.Element(__name__ + '.InteractionStatusType', minOccurs=0)

    @classmethod
    def create(cls, MessageType, SendingTimestamp):
        instance = cls()
        instance.MessageType = MessageType
        instance.SendingTimestamp = SendingTimestamp
        return instance


class Request(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    # Id = xsd.Attribute(xsd.ID, use=xsd.Use.OPTIONAL)
    Id = xsd.Attribute(xsd.String, use=xsd.Use.OPTIONAL)
    SenderProvidedRequestData = xsd.Ref(__name__ + '.SenderProvidedRequestData')
    MessageMetadata = xsd.Ref(__name__ + '.MessageMetadata')
    FSAttachmentsList = xsd.Ref(__name__ + '.FSAttachmentsList')
    ReplyTo = xsd.Element(xsd.String, minOccurs=0)
    SenderInformationSystemSignature = xsd.Element(__name__ + '.XMLDSigSignatureType', minOccurs=0)

    @classmethod
    def create(cls, SenderProvidedRequestData, MessageMetadata):
        instance = cls()
        instance.SenderProvidedRequestData = SenderProvidedRequestData
        instance.MessageMetadata = MessageMetadata
        return instance


class Response(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    # Id = xsd.Attribute(xsd.ID, use=xsd.Use.OPTIONAL)
    Id = xsd.Attribute(xsd.String, use=xsd.Use.OPTIONAL)
    OriginalMessageId = xsd.Element(xsd.String, minOccurs=0)
    OriginalTransactionCode = xsd.Element(xsd.String, minOccurs=0)
    ReferenceMessageID = xsd.Element(xsd.String, minOccurs=0)
    SenderProvidedResponseData = xsd.Ref(__name__ + '.SenderProvidedResponseData')
    MessageMetadata = xsd.Ref(__name__ + '.MessageMetadata')
    FSAttachmentsList = xsd.Ref(__name__ + '.FSAttachmentsList')
    SenderInformationSystemSignature = xsd.Element(__name__ + '.XMLDSigSignatureType', minOccurs=0)

    @classmethod
    def create(cls, SenderProvidedResponseData, MessageMetadata):
        instance = cls()
        instance.SenderProvidedResponseData = SenderProvidedResponseData
        instance.MessageMetadata = MessageMetadata
        return instance


class SendRequestRequest(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    SenderProvidedRequestData = xsd.Ref(__name__ + '.SenderProvidedRequestData')
    AttachmentContentList = xsd.Ref(__name__ + '.AttachmentContentList')
    CallerInformationSystemSignature = xsd.Element(__name__ + '.XMLDSigSignatureType', minOccurs=0)

    @classmethod
    def create(cls, SenderProvidedRequestData):
        instance = cls()
        instance.SenderProvidedRequestData = SenderProvidedRequestData
        return instance


class SendRequestResponse(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    MessageMetadata = xsd.Ref(__name__ + '.MessageMetadata')
    SMEVSignature = xsd.Element(__name__ + '.XMLDSigSignatureType', minOccurs=0)

    @classmethod
    def create(cls, MessageMetadata):
        instance = cls()
        instance.MessageMetadata = MessageMetadata
        return instance


class SendResponseRequest(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    SenderProvidedResponseData = xsd.Ref(__name__ + '.SenderProvidedResponseData')
    AttachmentContentList = xsd.Ref(__name__ + '.AttachmentContentList')
    CallerInformationSystemSignature = xsd.Element(__name__ + '.XMLDSigSignatureType', minOccurs=0)

    @classmethod
    def create(cls, SenderProvidedResponseData):
        instance = cls()
        instance.SenderProvidedResponseData = SenderProvidedResponseData
        return instance


class SendResponseResponse(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    MessageMetadata = xsd.Ref(__name__ + '.MessageMetadata')
    SMEVSignature = xsd.Element(__name__ + '.XMLDSigSignatureType', minOccurs=0)

    @classmethod
    def create(cls, MessageMetadata):
        instance = cls()
        instance.MessageMetadata = MessageMetadata
        return instance


class SenderProvidedRequestData(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    # Id = xsd.Attribute(xsd.ID, use=xsd.Use.OPTIONAL)
    Id = xsd.Attribute(xsd.String, use=xsd.Use.OPTIONAL)
    MessageID = xsd.Element(xsd.String)
    ReferenceMessageID = xsd.Element(xsd.String, minOccurs=0)
    TransactionCode = xsd.Element(xsd.String, minOccurs=0)
    NodeID = xsd.Element(xsd.String, minOccurs=0)
    EOL = xsd.Element(xsd.DateTime, minOccurs=0)
    MessagePrimaryContent = xsd.Ref(__name__ + '.MessagePrimaryContent')
    PersonalSignature = xsd.Element(__name__ + '.XMLDSigSignatureType', minOccurs=0)
    AttachmentHeaderList = xsd.Ref(__name__ + '.AttachmentHeaderList')
    RefAttachmentHeaderList = xsd.Ref(__name__ + '.RefAttachmentHeaderList')
    TestMessage = xsd.Element(__name__ + '.Void', minOccurs=0)

    @classmethod
    def create(cls, MessageID, MessagePrimaryContent):
        instance = cls()
        instance.MessageID = MessageID
        instance.MessagePrimaryContent = MessagePrimaryContent
        return instance


class SenderProvidedResponseData(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    # Id = xsd.Attribute(xsd.ID, use=xsd.Use.OPTIONAL)
    Id = xsd.Attribute(xsd.String, use=xsd.Use.OPTIONAL)
    MessageID = xsd.Element(xsd.String)
    To = xsd.Element(xsd.String)
    MessagePrimaryContent = xsd.Ref(__name__ + '.MessagePrimaryContent')
    PersonalSignature = xsd.Element(__name__ + '.XMLDSigSignatureType', minOccurs=0)
    AttachmentHeaderList = xsd.Ref(__name__ + '.AttachmentHeaderList')
    RefAttachmentHeaderList = xsd.Ref(__name__ + '.RefAttachmentHeaderList')
    AsyncProcessingStatus = xsd.Ref(__name__ + '.AsyncProcessingStatus')

    @classmethod
    def create(cls, MessageID, To):
        instance = cls()
        instance.MessageID = MessageID
        instance.To = To
        return instance


class SmevAsyncProcessingMessage(xsd.ComplexType):
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    AsyncProcessingStatusData = xsd.Ref(__name__ + '.AsyncProcessingStatusData')
    SMEVSignature = xsd.Element(__name__ + '.XMLDSigSignatureType', minOccurs=0)

    @classmethod
    def create(cls):
        instance = cls()
        return instance



##############################################################################
# Methods


GetResponse_method = xsd.Method(
    soapAction='urn:GetResponse',
    input='GetResponseRequest',
    inputPartName='parameters',
    output='GetResponseResponse',
    outputPartName='parameters',
    operationName='GetResponse',
    style='document',
)


GetStatus_method = xsd.Method(
    soapAction='urn:GetStatus',
    input='GetStatusRequest',
    inputPartName='parameters',
    output='GetStatusResponse',
    outputPartName='parameters',
    operationName='GetStatus',
    style='document',
)


Ack_method = xsd.Method(
    soapAction='urn:Ack',
    input='AckRequest',
    inputPartName='parameters',
    output='AckResponse',
    outputPartName='parameters',
    operationName='Ack',
    style='document',
)


GetRequest_method = xsd.Method(
    soapAction='urn:GetRequest',
    input='GetRequestRequest',
    inputPartName='parameters',
    output='GetRequestResponse',
    outputPartName='parameters',
    operationName='GetRequest',
    style='document',
)


SendResponse_method = xsd.Method(
    soapAction='urn:SendResponse',
    input='SendResponseRequest',
    inputPartName='parameters',
    output='SendResponseResponse',
    outputPartName='parameters',
    operationName='SendResponse',
    style='document',
)


SendRequest_method = xsd.Method(
    soapAction='urn:SendRequest',
    input='SendRequestRequest',
    inputPartName='parameters',
    output='SendRequestResponse',
    outputPartName='parameters',
    operationName='SendRequest',
    style='document',
)

Schema_5dace = xsd.Schema(
    # imports=[Schema_e65b4],
    includes=[],
    targetNamespace='urn://x-artefacts-smev-gov-ru/services/message-exchange/types/basic/1.2',
    elementFormDefault='qualified',
    simpleTypes=[InteractionStatusType],
    attributeGroups=[],
    groups=[],
    complexTypes=[XMLDSigSignatureType, AttachmentContentType, Void, AttachmentHeaderType, RefAttachmentHeaderType, FSAuthInfo, SmevFault],
    elements={'AckTargetMessage': xsd.Element(AckTargetMessage()), 'AttachmentContentList': xsd.Element(AttachmentContentList()), 'AttachmentHeaderList': xsd.Element(AttachmentHeaderList()), 'FSAttachmentsList': xsd.Element(FSAttachmentsList()), 'MessagePrimaryContent': xsd.Element(MessagePrimaryContent()), 'MessageReference': xsd.Element(MessageReference()), 'MessageTypeSelector': xsd.Element(MessageTypeSelector()), 'RefAttachmentHeaderList': xsd.Element(RefAttachmentHeaderList()), 'Timestamp': xsd.Element(Timestamp())},
)

Schema_a6a2c = xsd.Schema(
    imports=[Schema_5dace],
    includes=[],
    targetNamespace='urn://x-artefacts-smev-gov-ru/services/message-exchange/types/1.2',
    elementFormDefault='qualified',
    simpleTypes=[RejectCode, MessageTypeType],
    attributeGroups=[],
    groups=[],
    complexTypes=[],
    elements={'AckRequest': xsd.Element(AckRequest()), 'AckResponse': xsd.Element(__name__ + '.Void'), 'AsyncProcessingStatus': xsd.Element(AsyncProcessingStatus()), 'AsyncProcessingStatusData': xsd.Element(AsyncProcessingStatusData()), 'GetRequestRequest': xsd.Element(GetRequestRequest()), 'GetRequestResponse': xsd.Element(GetRequestResponse()), 'GetResponseRequest': xsd.Element(GetResponseRequest()), 'GetResponseResponse': xsd.Element(GetResponseResponse()), 'GetStatusRequest': xsd.Element(GetStatusRequest()), 'GetStatusResponse': xsd.Element(GetStatusResponse()), 'MessageMetadata': xsd.Element(MessageMetadata()), 'Request': xsd.Element(Request()), 'Response': xsd.Element(Response()), 'SendRequestRequest': xsd.Element(SendRequestRequest()), 'SendRequestResponse': xsd.Element(SendRequestResponse()), 'SendResponseRequest': xsd.Element(SendResponseRequest()), 'SendResponseResponse': xsd.Element(SendResponseResponse()), 'SenderProvidedRequestData': xsd.Element(SenderProvidedRequestData()), 'SenderProvidedResponseData': xsd.Element(SenderProvidedResponseData()), 'SmevAsyncProcessingMessage': xsd.Element(SmevAsyncProcessingMessage())},
)

Schema_54195 = xsd.Schema(
    imports=[Schema_5dace],
    includes=[],
    targetNamespace='urn://x-artefacts-smev-gov-ru/services/message-exchange/types/faults/1.2',
    elementFormDefault='qualified',
    simpleTypes=[],
    attributeGroups=[],
    groups=[],
    complexTypes=[SignatureVerificationFault, InvalidContent, AttachmentSizeLimitExceeded, BusinessDataTypeIsNotSupported, DestinationOverflow, QuoteLimitExceeded],
    elements={'AccessDenied': xsd.Element(__name__ + '.Void'), 'AttachmentContentMiscoordination': xsd.Element(__name__ + '.Void'), 'AttachmentSizeLimitExceeded': xsd.Element(AttachmentSizeLimitExceeded), 'BusinessDataTypeIsNotSupported': xsd.Element(BusinessDataTypeIsNotSupported), 'DestinationOverflow': xsd.Element(DestinationOverflow), 'EndOfLifeReached': xsd.Element(__name__ + '.Void'), 'IncorrectResponseContentType': xsd.Element(__name__ + '.Void'), 'InvalidContent': xsd.Element(InvalidContent), 'InvalidMessageIdFormat': xsd.Element(__name__ + '.Void'), 'MessageIsAlreadySent': xsd.Element(__name__ + '.Void'), 'QuoteLimitExceeded': xsd.Element(QuoteLimitExceeded), 'RecipientIsNotFound': xsd.Element(__name__ + '.Void'), 'RequestIsNotFound': xsd.Element(__name__ + '.Void'), 'SMEVFailure': xsd.Element(__name__ + '.Void'), 'SenderIsNotRegistered': xsd.Element(__name__ + '.Void'), 'SignatureVerificationFault': xsd.Element(SignatureVerificationFault), 'StaleMessageId': xsd.Element(__name__ + '.Void'), 'TargetMessageIsNotFound': xsd.Element(__name__ + '.Void'), 'TransactionCodeInvalid': xsd.Element(__name__ + '.SmevFault'), 'UnknownMessageType': xsd.Element(__name__ + '.Void')},
)


##############################################################################
# SOAP Service


SMEVMessageExchangeEndpoint_SERVICE = soap.Service(
    name='SMEVMessageExchangeEndpoint',
    targetNamespace='urn://x-artefacts-smev-gov-ru/services/message-exchange/1.2',
    location='${scheme}://${host}/smev/v1.2/ws',
    schemas=[Schema_54195, Schema_5dace, Schema_a6a2c],
    version=soap.SOAPVersion.SOAP11,
    methods=[GetResponse_method, GetStatus_method, Ack_method, GetRequest_method, SendResponse_method, SendRequest_method],
)


##############################################################################
# SOAP Service Stub


class SMEVMessageExchangeEndpointServiceStub(soap.Stub):
    SERVICE = SMEVMessageExchangeEndpoint_SERVICE
    SCHEME = 'http'
    HOST = 'smev3-d.test.gosuslugi.ru:7500'

    def GetResponse(self, GetResponseRequest, header=None):
        return self.call('GetResponse', GetResponseRequest, header=header)

    def GetStatus(self, GetStatusRequest, header=None):
        return self.call('GetStatus', GetStatusRequest, header=header)

    def Ack(self, AckRequest, header=None):
        return self.call('Ack', AckRequest, header=header)

    def GetRequest(self, GetRequestRequest, header=None):
        return self.call('GetRequest', GetRequestRequest, header=header)

    def SendResponse(self, SendResponseRequest, header=None):
        return self.call('SendResponse', SendResponseRequest, header=header)

    def SendRequest(self, SendRequestRequest, header=None):
        return self.call('SendRequest', SendRequestRequest, header=header)
